// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __methsim_RcppExports_h__
#define __methsim_RcppExports_h__

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace methsim {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("methsim", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("methsim", "methsim_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in methsim");
            }
        }
    }

    inline arma::mat ipf(const arma::mat& seed, arma::vec row_margins, arma::rowvec col_margins, int iter = 1000, double tol = 1e-10) {
        typedef SEXP(*Ptr_ipf)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_ipf p_ipf = NULL;
        if (p_ipf == NULL) {
            validateSignature("arma::mat(*ipf)(const arma::mat&,arma::vec,arma::rowvec,int,double)");
            p_ipf = (Ptr_ipf)R_GetCCallable("methsim", "methsim_ipf");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ipf(Rcpp::wrap(seed), Rcpp::wrap(row_margins), Rcpp::wrap(col_margins), Rcpp::wrap(iter), Rcpp::wrap(tol));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<arma::mat >(__result);
    }

}

#endif // __methsim_RcppExports_h__
